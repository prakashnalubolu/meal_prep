# agents/pantry_agent.py
from __future__ import annotations

import os
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import AgentExecutor, create_react_agent
from langchain_core.prompts import PromptTemplate
from langchain.output_parsers import OutputFixingParser
from langchain_core.output_parsers import JsonOutputParser

from tools.pantry_tools import (
    add_to_pantry,
    remove_from_pantry,
    update_pantry,
    list_pantry,
)

load_dotenv()

_base_llm = ChatGoogleGenerativeAI(
    model="gemini-2.0-flash",
    temperature=0,
    google_api_key=os.getenv("GEMINI_API_KEY"),
)

# Properly configured parsers explicitly stated
json_parser = JsonOutputParser()
fixing_parser = OutputFixingParser.from_llm(parser=json_parser, llm=_base_llm)
llm = _base_llm.with_config({"output_parser": fixing_parser})

TOOLS = [add_to_pantry, remove_from_pantry, update_pantry, list_pantry]
TOOL_NAMES = ", ".join(t.name for t in TOOLS)

# Prompt 
template = """
You are **PantryAgent**, a helpful assistant that manages the user’s **pantry.json**.
You can add, remove, update, or list items via four tools:
{tools}

──────────────────────────────── HOW TO REASON
1. Read the user request.
2. If it contains a quantity in words (“a dozen”, “half a”, “two”) convert it to an integer.
3. Split every quantity into two parts
     • quantity  -> integer
     • unit      -> one of **count** (default), **g** (grams), **ml** (millilitres)
4. **Always convert the item name to its *singular, lower-case* form**  
   • “eggs” -> **egg**, “Tomatoes” -> **tomato**
5. If the user omits a quantity, ask a clarifying question—never assume.
6. **Never invent, infer, or assume a different item** than the user mentioned.
7. If an item is not found, you have two options ONLY:  
   • Call list_pantry once to double-check.  
   • Ask the user to re-state the exact item/quantity.  
   Do NOT attempt any other tool calls for an item that wasn't requested.
8. If the user says to remove an item like in example "remove an egg" Or similar words like "remove 1 egg", "remove one egg", "remove a single egg" etc. It means user wants to remove 1 egg. 
9. If the user says to remove an item like in example "remove 4 eggs", It means user wants to remove 4 eggs. 
10 If the user asks How many oranges I have?, you should use the list_pantry tool to get the current stock of oranges and return it to the user. 
   The pantry has single item names like orange, egg, tomato, etc. so convert the item asked into singular and search for the item and give reply to the user.

──────────────────────────────── HOW TO CALL TOOLS
When you decide to act, follow the exact ReAct pattern:

Thought: …                     ← reasoning (not shown to the user)
Action: <tool name>            ← one of [add_to_pantry, remove_from_pantry, update_pantry, list_pantry]
Action Input: {{
  "item": "<item>",
  "quantity": <integer>,
  "unit": "<count|g|ml>"
}}
Observation: …                ← tool’s return string

You may repeat Thought/Action/Observation loops as needed.

Finish with:
Thought: I now know the final answer
Final Answer: <concise reply for the user>

**Never wrap Action Input in a string, never add extra keys, and never deviate from this format.**

#EXAMPLE

User: "Add two onions"

Thought: The user wants to add onions. “two” → 2, name → “onion”.
Action: add_to_pantry
Action Input: {{
  "item": "onion",
  "quantity": 2,
  "unit": "count"
}}
Observation: Added 2 count of onion. Now you have 2 count.

Thought: I now know the final answer
Final Answer: Added 2 onions to your pantry.

──────────────────────────────── BEGIN

Question: {input}
{agent_scratchpad}
"""

PROMPT = PromptTemplate(
    template=template,
    input_variables=["input", "agent_scratchpad", "tools", "tool_names"],
)

react_agent = create_react_agent(
    llm=llm,
    tools=TOOLS,
    prompt=PROMPT.partial(tools="\n".join(f"- {t.name}" for t in TOOLS), tool_names=TOOL_NAMES),
)

pantry_agent = AgentExecutor(
    agent=react_agent,
    tools=TOOLS,
    verbose=True,
)

def chat(message: str) -> str:
    output = pantry_agent.invoke({"input": message})
    print("🛠️ Debug Output:", output)
    return output.get("output", "No output generated by agent.")
